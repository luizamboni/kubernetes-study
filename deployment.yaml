---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: url-shortener
spec:
  replicas: 2
  selector:
    matchLabels:
      app: url-shortener
  template:
    metadata:
      labels:
        app: url-shortener
    spec:
      containers:
        - name: url-shortener
          image: public.ecr.aws/p6g1c2o3/arm64/url-shortener:latest
          ports:
            - containerPort: 3000
          env:
            - name: RAILS_ENV
              value: "production"
            - name: SECRET_KEY_BASE
              value: "your_secret_key_here"
            - name: REDIS_URL
              value: "redis://redis-service:6379"
          volumeMounts:
            - name: url-shortener-storage
              mountPath: /rails/storage 
# to see it
# kubectl exec url-shortener-7b499dd8fd-pbxqg -- /bin/bash -c "ls /rails/storage/"

      volumes:
        - name: url-shortener-storage
          persistentVolumeClaim:
            claimName: url-shortener-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: url-shortener
spec:
  selector:
    app: url-shortener
  ports:
    - port: 80          # This is the port on which the service is exposed inside the cluster. Other pods within the cluster can access the service on this port.
      targetPort: 3000  # 3000  This specifies the port on the pod to which the service should forward traffic. This should match the port your application is listening on inside its container.
  type: LoadBalancer
  
---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1  # Adjust based on your needs
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2  # Use an appropriate Redis image
        ports:
        - containerPort: 6379
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP